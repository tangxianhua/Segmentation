# def twoSum(nums,target):
#     lens = len(nums)
#     j = -1
#     for i in range(1,lens):
#         temp = nums[:i]
#         if (target - nums[i]) in temp:
#             j= temp.index(target-nums[i])
#             break
#     if j>= 0:
#         return [j,i]

# table = {'abc': 1, 'def': 2, 'ghi': 3}
#
# map = dict([(v, k) for k, v in table.iteritems()])
# print(map)

import matplotlib.pyplot as plt

loss =[1.9657569099366665, 1.7553478342220188, 1.6615829648524523, 1.5589019094523975, 1.4902681603334844, 1.4190130164135868, 1.3676596089682675, 1.3026555268522897, 1.2627761207107266, 0.8448214585018068, 0.7847497009522376, 0.7898885863321738, 0.7595209164602092, 0.7439496253980288, 0.7208341945323261, 0.710669346841957, 0.6875368221436007, 0.6644507810637237, 0.4825839657901679, 0.44486888206473796, 0.4639451415754686, 0.4404742485550285, 0.424248704863658, 0.4233698483592581, 0.39999537952454434, 0.38097073871712245, 0.3798331885793395, 0.23561726233683153, 0.20752285029971007, 0.2202189404810908, 0.22452630137618945, 0.21913658887618048, 0.2163781208997032, 0.216254849736769, 0.2152453696364208, 0.21377285373233082, 0.11808494371102721, 0.1443814456119327, 0.14704583190365053, 0.1441689698596874, 0.14313371866919294, 0.13498761945120025, 0.1333531468219609, 0.1384105670500408, 0.13760125429353703, 0.10716869302507068, 0.07938845509687814, 0.08909622779315718, 0.10640766506056393, 0.10411522181313448, 0.09553003290246427, 0.09906158299596132, 0.09701005132136237, 0.09614319222302074, 0.08579363420142365, 0.07775154996271885, 0.07346770283573159, 0.0627707762383627, 0.0734654693673471, 0.07427719020094527, 0.07033447424676453, 0.06935042618208082, 0.06934233585116273, 0.03411344007854173, 0.02993585881115232, 0.03393492321379209, 0.03862861088551085, 0.045079633471668386, 0.047387209263072626, 0.0512327469712521, 0.0481448751865855, 0.04820130734585553, 0.020738075212798735, 0.01565016747867336, 0.0224547597801365, 0.03541050770683428, 0.03814156849582996, 0.0411755276828731, 0.04319641578094513, 0.045307090636256125, 0.04328035764914169, 0.005675831903716599, 0.01932561039463516, 0.024331282550011185, 0.022858621734013363, 0.0393865747428003, 0.04017730646848174, 0.03724389810402566, 0.035979307463933054, 0.037634455082448545, 0.007051793475108113, 0.009001601224903111, 0.017004707506360264, 0.0141953186946035, 0.014011746235684863, 0.021623302099331027, 0.025177834016033476, 0.026831615242209707, 0.02770113618759724, 0.002010146660062318, 0.002316727685134225, 0.019125194517601283, 0.016556724604786608, 0.016887559478497634, 0.01550597138583982, 0.016356047106195454, 0.018355245898139735, 0.020516833914245795, 0.0010745271268230141, 0.02735323813863453, 0.021751669586884077, 0.022772444409567136, 0.02458877228839774, 0.031228915548532767, 0.030236662840353916, 0.027161655213131675, 0.024268532217388807, 0.03087300089066936, 0.027061826131547066, 0.01854817308293853, 0.0176728010354837, 0.01574375187687171, 0.02744715319694088, 0.027133747121764803, 0.026195017210132135, 0.02479177131216849, 0.01591571854436441, 0.011414997785309388, 0.007772359141891665, 0.005957643778996865, 0.02382314246409391, 0.020875200346292287, 0.022175640115878026, 0.021166069292477295, 0.020007501343722506, 0.02726566761190192, 0.014754178159829913, 0.01006167007313994, 0.0077006383366543755, 0.026478426996707646, 0.029572730781956123, 0.02649412588180855, 0.02351053399243082, 0.021035499785581856, 0.00017449702449376047, 0.0001607248302327875, 0.003624910726565678, 0.02137452093832986, 0.020037526366130008, 0.016769697514465044, 0.021098411691418333, 0.018790649595108143, 0.016897558517021922, 0.00035189669179760583, 0.0002897993347080572, 0.0005392438943677481, 0.004585027933302779, 0.011250032868524868, 0.010029620925424036, 0.01903623739074312, 0.017905792963798624, 0.01621784689571256, 0.03619463664347641, 0.020908523081151296, 0.014981810859350806, 0.01282132399852, 0.01665329826603065, 0.017710875206095017, 0.021670664992097913, 0.020421821332854983, 0.01850812266681146, 0.00021120529377851937, 0.0002624712780971237, 0.0002900756315863333, 0.005169860293957217, 0.026508251314924326, 0.023417654777584337, 0.02142273641936013, 0.01884178547601227, 0.016848058096698808]
#acc = [23.4, 34.2, 38.0, 42.6, 45.16, 47.53333333333333, 49.6, 52.125, 53.6, 71.2, 73.1, 73.06666666666666, 74.55, 75.04, 75.7, 76.05714285714286, 76.825, 77.4888888888889, 84.4, 84.8, 84.53333333333333, 85.0, 85.32, 85.43333333333334, 86.48571428571428, 87.125, 87.26666666666667, 92.6, 93.4, 93.06666666666666, 92.55, 92.72, 92.96666666666667, 93.0, 93.1, 93.13333333333334, 96.0, 95.3, 95.33333333333333, 95.35, 95.32, 95.56666666666666, 95.54285714285714, 95.425, 95.53333333333333, 96.8, 97.6, 97.2, 96.45, 96.68, 96.9, 96.74285714285715, 96.9, 97.0, 98.2, 98.0, 98.2, 98.45, 98.0, 97.83333333333333, 97.97142857142858, 97.975, 97.88888888888889, 99.0, 99.0, 99.0, 98.85, 98.64, 98.56666666666666, 98.34285714285714, 98.5, 98.46666666666667, 99.6, 99.5, 99.33333333333333, 98.85, 98.84, 98.7, 98.68571428571428, 98.6, 98.64444444444445, 100.0, 99.5, 99.53333333333333, 99.45, 98.92, 98.83333333333333, 98.88571428571429, 98.9, 98.86666666666666, 100.0, 99.8, 99.66666666666667, 99.7, 99.68, 99.6, 99.51428571428572, 99.475, 99.37777777777778, 100.0, 100.0, 99.33333333333333, 99.5, 99.48, 99.5, 99.42857142857143, 99.375, 99.28888888888889, 100.0, 99.3, 99.4, 99.4, 99.32, 99.16666666666667, 99.2, 99.3, 99.37777777777778, 98.6, 99.0, 99.33333333333333, 99.35, 99.44, 99.26666666666667, 99.31428571428572, 99.325, 99.35555555555555, 99.4, 99.5, 99.66666666666667, 99.75, 99.36, 99.46666666666667, 99.34285714285714, 99.375, 99.42222222222222, 99.0, 99.5, 99.66666666666667, 99.75, 99.4, 99.2, 99.28571428571429, 99.375, 99.44444444444444, 100.0, 100.0, 99.86666666666666, 99.55, 99.52, 99.6, 99.51428571428572, 99.575, 99.62222222222222, 100.0, 100.0, 100.0, 99.8, 99.64, 99.66666666666667, 99.51428571428572, 99.525, 99.57777777777778, 99.4, 99.6, 99.73333333333333, 99.75, 99.6, 99.5, 99.42857142857143, 99.4, 99.46666666666667, 100.0, 100.0, 100.0, 99.95, 99.36, 99.43333333333334, 99.45714285714286, 99.525, 99.57777777777778]
epochloss = [1.2418638175286263, 0.6999985600073881, 0.6548694543812301, 0.39155359362367453, 0.3748853529030662, 0.22932247406968526, 0.21053518271621297, 0.21222253374889358, 0.13409723327525952, 0.13332333629286408, 0.09828397599934365, 0.17169225601242108, 0.0747870697057536, 0.1159284625014556, 0.04902900653335932, 0.11916917864890679, 0.0427756749565649, 0.1660586889929073, 0.04283450507493746, 0.11402320313666726, 0.028754177275988925, 0.09833899480130116, 0.019982296856231145, 0.09134821131944947, 0.027272270009069174, 0.1608261854365796, 0.023602502340062094, 0.1581585300149373, 0.020611527811910217, 0.16588670487036614, 0.019733425685366863, 0.11485962122650432, 0.015947147622266792, 0.12548235940335223, 0.017423264873382454, 0.18124647461618565, 0.0173676275800881, 0.15664449697623203, 0.015847314883562537, 0.12552356243214374]
plt.plot(loss)
plt.plot(epochloss)
plt.savefig('mushroom.png')